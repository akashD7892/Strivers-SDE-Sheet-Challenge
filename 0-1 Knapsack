 public:
    int solve(int W, int *wt, int *val, int n ,vector<vector<int>>&dp){
        // base case
        if( n == 0 ){
            // we would take it unless our sack is not completely filled 
            if( wt[n] <= W ){
                return val[0] ;
            }
            else 
                return 0 ;
        }
        
        if( dp[n][W] != -1 )
         return dp[n][W] ;
         
        int incl = 0;
        if( wt[n] <= W ){ 
            // as we have used wt[n] so remaining space is W-wt[n] 
            incl = val[n] + solve( W-wt[n], wt, val, n-1,dp );
        }
        //as we are not including it 
        int excl = solve( W, wt, val, n-1,dp ) + 0 ;
        dp[n][W] = max( incl, excl ); 
        return dp[n][W] ;
    }
    //Function to return max value that can be put in knapsack of capacity W.
    int knapSack(int W, int wt[], int val[], int n) 
    { 
       // Your code here
       vector<vector<int>>dp(n, vector<int>(W+1,-1));
       
       return solve( W, wt, val, n-1, dp) ;
       
    }
