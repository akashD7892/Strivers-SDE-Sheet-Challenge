class Solution {
public:
    void leftView( Node*root, vector<int>&ans ) {
    
    if( root == NULL )
     return ;

    if( root->left == NULL && root->right == NULL ) 
     return ;
     
    if( root != NULL ) {
        ans.push_back( root -> data ) ;
    }

    if( root->left ){
        leftView( root->left, ans ) ;
    }
    else {
        leftView( root->right, ans ) ;
    } 

} 

void leafNode ( Node*root, vector<int>&ans ) {
    
    if( root == NULL )
     return ;

    if( root->left == NULL && root->right == NULL ) {
        ans.push_back( root->data ) ;
    }

    leafNode( root->left, ans ) ;
    leafNode( root->right, ans ) ;

}

void rightView( Node*root, vector<int>&ans ) {
    if( root == NULL )
     return ;

    if( root->left == NULL && root->right == NULL ) 
     return ;
     
    if( root->right ){
        rightView( root->right, ans ) ;
    }
    else {
        rightView( root->left, ans ) ;
    } 

    if( root != NULL ) {
        ans.push_back( root -> data ) ;
    }

}
    vector <int> boundary(Node *root)
    {
        //Your code here
    vector<int>ans ; 
    ans.push_back(root->data) ;

    leftView( root->left, ans ) ;
    
    leafNode( root->left, ans ) ;
    leafNode( root->right, ans ) ;
  
    rightView( root->right, ans ) ;

    return ans ;
    }
};
