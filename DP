Q.Geek wants to climb from the 0th stair to the (n-1)th stair. At a time the Geek can climb either one or two steps. 
A height[N] array is also given. Whenever the geek jumps from stair i to stair j, the energy consumed in the jump is abs(height[i]- height[j]),
where abs() means the absolute difference. return the minimum energy that can be used by the Geek to jump from stair 0 to stair N-1.

class Solution {
  public:
    int f( int ind, vector<int>&h, vector<int>&dp ){
        if( ind == 0 ) return 0 ;
        if(dp[ind] != -1) return dp[ind] ;
        
        //checking for one step 
        int left = f(ind-1, h, dp) + abs(h[ind] - h[ind-1]) ;
        int right = INT_MAX ;
        
        // checking for two steps back
        if( ind>1) right = f(ind-2, h, dp) + abs(h[ind] - h[ind-2]);
        
        return dp[ind] = min(left,right) ;
    }
    int minimumEnergy(vector<int>& height, int n) {
        // Code here
        vector<int>dp(n+1, -1) ;
        return f(n-1, height, dp );
    }
};
