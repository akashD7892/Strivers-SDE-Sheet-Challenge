class Solution {
public:
    TreeNode* solve( vector<int>&inorder, vector<int>&postorder, int &index, int start, int end, unordered_map<int, int>&mp ) {
        
        //base condition 
        if( index < 0 || start > end )
         return NULL ; 

        int element = postorder[index--] ;
        int position = mp[element] ; 
        TreeNode* root = new TreeNode(element) ; 

        // firstly right then left opposite to preorder
        root -> right = solve( inorder, postorder, index, position+1, end, mp ) ;
        root -> left = solve( inorder, postorder, index, start, position-1, mp ) ;

        return root ;
    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        
        int n = inorder.size() ;
        unordered_map<int, int>mp ;

        for( int i = 0; i < n; i++ ) {
            mp[inorder[i]] = i ;
        }
        
        int index = n-1 ;
        return solve( inorder, postorder, index, 0, n-1, mp) ;
    }
};
